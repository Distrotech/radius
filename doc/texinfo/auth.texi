@c This is part of the Radius manual.
@c Copyright (C) 1999,2000,2001 Sergey Poznyakoff
@c See file radius.texi for copying conditions.
@comment *******************************************************************
@node Authentication, Accounting, Configuration files, Top
@chapter Authentication

Several authentication types are supported. The use of a particular
authentication type for a given user is determined by the value
of @code{Auth-Type} attribute in his profile.

@menu
* Accept Auth::                   Accept unconditionally.
* Reject Auth::                   Reject unconditionally.
* Local Password Auth::           Authenticate using plaintext password.
* Encrypted Password Auth::       Authenticate using MD5 encrypted password.
* System Auth::                   Authenticate using system account.
* SQL Auth::                      Authenticate using SQL.
* PAM Auth::                      Authenticate using PAM.
* Checking Simultaneous Logins::  
@end menu

@comment *L2****************************************************************
@node Accept Auth, Reject Auth, , Authentication
@section Accept Authentication Type
@cindex Accept Authentication Type
@cindex guest accounts, setting up

@subheading Synopsis
@example
Auth-Type = Accept
@end example

@subheading Usage
When a user has the above string in his profile he will be authenticated
without any further checking. Actually this means that only username
is required for authentication.

This authentication type can be used for guest accounts, e.g. the
following profile in @file{users}:

@example
guest   Auth-Type = Accept,
                Password != "",
                Simultaneous-Use = 10
        Service-Type = Framed-User,
                Framed-Protocol = PPP
@end example

@noindent
allows up to 10 simultaneous guest PPP accounts. To log in using such
guest account it is sufficient to use username @samp{guest} and any
non-empty password.

@comment *L2****************************************************************
@node Reject Auth, Local Password Auth, Accept Auth, Authentication
@section Reject Authentication Type
@cindex Reject Authentication Type
@cindex disabling user accounts

@subheading Synopsis
@example
Auth-Type = Reject
@end example

@subheading Usage
The @code{Reject} authentication type causes the request to be rejected
unconditionally. It can be used to disable a user account. For another
method of disabling user accounts, see @ref{access.deny file}.

@comment *L2****************************************************************
@node Local Password Auth, Encrypted Password Auth, Reject Auth, Authentication
@section Local Password Authentication Type
@cindex Local Password Auth

@subheading Synopsis
@example
Auth-Type = Local,
Password = <plaintext password>
@end example

@subheading Usage
The @code{Password} attribute in user's profile contains the
@emph{plaintext} password. If this password and the one supplied by the
user coincide, then the user is authenticated.

We do not recommend the use of this authentication type, since keeping
plaintext passwords in @file{users} is very insecure, even though the
file is owned by root and its permissions are 0600.

@comment *L2****************************************************************
@node Encrypted Password Auth, System Auth, Local Password Auth, Authentication
@section Encrypted Password Authentication Type
@cindex Encrypted Password Authentication Type

@subheading Synopsis
@example
Auth-Type = Crypt-Local,
Password = <MD5 hash>
@end example
@noindent
or

@example
Crypt-Password = <MD5 hash>
@end example

@subheading Usage

The @code{Password} attribute in user's profile contains the MD5 hash
of his password. The MD5 hash is computed over the password supplied
by the user, both hashes are compared and if they coincide, the user
is authenticated.

@comment *L2****************************************************************
@node System Auth, SQL Auth, Encrypted Password Auth, Authentication
@section System Authentication Type
@cindex System Authentication Type

@subheading Synopsis
@example
Auth-Type = System
@end example

When a user has the above string in his profile record, he will be
authenticated using system /etc/passwd (/etc/shadow) files, i.e.
to be authenticated he has to have a valid system account on the
machine where the radius server is running.

@comment *L2****************************************************************
@node SQL Auth, PAM Auth, System Auth, Authentication
@section SQL Authentication Type
@cindex SQL Authentication Type

@subheading Synopsis
@example
Auth-Type = SQL
@end example
@noindent
or

@example
Auth-Type = Mysql
@end example

@subheading Usage
This authentication type means that the MD5 hash of his password is kept
in SQL database. To authenticate such user, @code{radiusd} will query
the database using @code{auth_query} from the @file{sqlserver} file.
It will then compute the MD5 hash over the supplied password and
compare it with the string returned by the query. If both strings
coincide, the user will be authenticated.

@xref{sqlserver file}.
@xref{Queries,,Writing SQL query templates}.

@comment *L2****************************************************************
@node PAM Auth, Checking Simultaneous Logins, SQL Auth, Authentication
@section PAM Authentication Type
@cindex PAM Authentication Type

@subheading Synopsis
@example
Auth-Type = PAM
@end example
@noindent
or

@example
Auth-Type = PAM
PAM-Auth = <PAM service>
@end example

@subheading Usage

This authentication type indicates that a user should be authenticated
using PAM (Pluggable Authentication Module) framework. The value of
@code{PAM-Auth} attribute specifies the PAM service to be used. 
If it is not specified, @samp{radius} will be used. 

@comment *L2****************************************************************
@node Checking Simultaneous Logins, , PAM Auth, Authentication
@section Checking Simultaneous Logins
@cindex Checking Simultaneous Logins
@cindex simultaneous logins, checking for

The number of sessions a user can have open simultaneously can be
restricted by setting @code{Simultaneous-Use} attribute in the user's
profile check-pairs @ref{Simultaneous-Use}. By default the number
of simultaneous sessions is unlimited.

When a user with limited number of simultaneous logins authenticates
himself, Radius first sees how many sessions are already open for this user.
If this number is equal to the value of @code{Simultaneous-Use}
attribute the authentication request is rejected.

To determine the number of open sessions, Radius scans the
@file{radlog/radutmp} for any open entries marked with the
user's login name @ref{Unix Accounting}. Such entries are created
when Radius receives an Accounting-Request packet with
@code{Acct-Status-Type} attribute set to @code{Start}. An entry is
marked closed when a corresponding Accounting-Request packet arrives with
@code{Acct-Status-Type} attribute set to @code{Stop}.

Since an open entry might be a result of missing @code{Stop} packet,
Radius queries the NAS whether the session listed in the entry is
currently active. If the NAS replies positive, the session count
is incremented, if it replies negative, such entry is marked as
closed and is not counted. There may also be cases when the NAS
is unreachable due to some reasons. In such cases the Radius behavior
is determined by the value of @code{checkrad-assume-logged} in
@file{config} file @ref{auth,,auth statement (raddb/config)}.
If the value is @code{yes}, Radius assumes the session is still
active and increases the session count, otherwise it proceeds as
if the NAS returned negative reply.

To query a NAS, Radius first looks up its type and additional parameters
in @file{naslist} file (@pxref{naslist file}). If the NAS type is @samp{true},
Radius acts as if the NAS returned 1, if the type is @samp{false}, it
acts as if the NAS returned 0, otherwise it looks up the entry
in the @file{nastypes} which has matching type (@pxref{nastypes file}).
If such entry does not exist, Radius issues the error message and
acts accordingly to the value of configuration variable
@code{checkrad-assume-logged}.
Otherwise, Radius determines the query method to use from the second
field of this entry, and constructs its arguments by appending
arguments from the @file{naslist} entry to those of @code{nastypes}
entry. @emph{Please note}, that the former take precedence over the
latter, and can thus be used to override default values specified
in @file{nastypes}.

Having determined the query method and its argument, Radius queries
NAS and analyses its output. To analyze it Radius uses user-supplied
functions defined in file @file{raddb/rewrite}. The function to use
is specified by the @code{function=} argument to the method. It is
called each time a line of output is received from the NAS (for
finger queries) or a variable is received (for SNMP queries). The
process continues until the function returns 1 or the last line
of output is read or a timeout occurs whichever comes first.

If during processing NAS reply the user-function returns 1 it is taken
to mean the user's session is now active at the NAS, if the end of
output was reached during scanning it is taken to mean the user's
session is not active.

[FIXME]
