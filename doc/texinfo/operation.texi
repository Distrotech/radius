@c This is part of the Radius manual.
@c Copyright (C) 1999,2000,2001 Sergey Poznyakoff
@c See file radius.texi for copying conditions.
@comment *******************************************************************
@node Operation, Invocation, Naming conventions, Top
@chapter How Radius operates.
@cindex @sc{nas}
@cindex Network Access Server

The main purpose of Radius is to centralize authentication of users coming
from various network stations. Its primary usage is for dial-in users,
though it can be used for any kind of network connection.

Radius uses the Client/Server model. The main server keeps the centralized
user database. Each user's profile in this database determines which services
are allowed for this particular user.

The Network Access Server (@NAS{} in short) is a machine that actually provides
a service for the user. It can do so, e.g. by running a pool of modems the
users can connect to. Otherwise, it can be a machine connected to the network
and allowing some form of remote access, like telnet or ssh. It can even be
a workstation allowing console logins to it. Whichever service it provides
the @NAS{} sends the request to the central Radius server in order to determine
whether the user trying to access the service is allowed to do so. Such
request carries information about user's login name, password, @NAS{}
identifier (such as its @IP{}), etc.

On receiving such request Radius server retrieves from its database
a profile corresponding to the user's login name. The profile basically
consists of two parts: a checklist used for authentication and a reply
list used for authorization. The server checks the authenticity of the
user using first part of the retrieved profile. If this check succeeds,
it uses second part of the profile to authorize the user, i.e. to
determine which service he should be provided. Then, the server responds
with the parameters of the service, such as connection speed, framed IP
address, etc. If any of the described checks had failed, the server sends
the negative response.

If the server needs some additional information in order to process the
request, it asks the @NAS{} to supply such information. Thus, for example, if
the user is allowed to use several services, he can be asked which one of
them he wishes to use, etc.

When @NAS{} receives the positive authentication response, it initiates the
connection.

The @NAS{} can be configured to notify Radius server about such events as
session start, session stop or changing some parameters during the
session. It can also notify the server about other events, such as @NAS{}
shutdown or startup. This is called @dfn{accounting} and the radius server
responsible for processing this information is called an @dfn{accounting
server}. 

@menu
* Attributes::                  Attributes.
* Requests::                    Radius requests.
* Matching Rule::               Rules for request processing.
* Request processing::          How Radius processes incoming requests.
@end menu

@comment *L2****************************************************************
@node Attributes
@section Attributes
@cindex Attribute
@cindex Attribute-Value pair
@cindex A/V pair
@cindex additivity of an attribute
@cindex propagation of an attribute
@cindex properties of an attribute

The information the Radius requests carry is stored as a list of
@dfn{Attribute-Value pairs}. Each pair consists of @dfn{Attribute
number} and @dfn{Attribute value}. The @dfn{Attribute number} identifies
the type of information the pair carries and the @dfn{Attribute Value}
keeps the actual data.

The Value part of an attribute can contain the data of one of the
following types:

@table @asis
@item Integer
A 32-bit unsigned integer value.
@item IP-number
An IPv4 IP-number.
@item String
A character string up to 253 characters long.
@end table

For convenience, the attributes and the values of some frequently used
integer attributes are given symbolic names. These names are assigned to
attributes and values in the dictionary file @ref{dictionary file}.

The attribute numbers range from 1 to 255. The attributes with the numbers
greater than 255 are used internally by the sever and cannot be sent to
the @NAS{}.

The special attribute 26, @dfn{Vendor-Specific}, is available to allow
vendors of the @NAS{} hardware or software to support their own extended
attributes. @ref{Vendor-Specific,, Vendor-Specific attribute}.

Each attribute has a set of properties associated with it. The
properties are:

@table @dfn
@item usage flags
These flags determine usage of the attribute in configuration
files @file{huntgroups}, @file{hints} and @file{users}.
@item propagation
When a radius server functions in proxy mode, it uses the @dfn{propagation}
bit to determine which attributes from the reply packet should be passed
back to the requesting @NAS{} (@pxref{Proxy Service}).
@item additivity
Some configuration rules may cause addition of new @AVP{}s to the
incoming request. Before addition of a new pair, @command{radiusd}
scans the request to see if it already contains a pair with the same
attribute. If it does, the value of @dfn{additivity} determines the
further actions:
@table @asis
@item None
The old pair is retained in the request, the new pair is not added to
it.
@item Replace
The old pair is retained in the request, but its value is replaced with
that of the new pair.
@item Append
The new pair is appended to the end of the pair list.
@end table
@end table

The attributes are declared in @file{raddb/dictionary} file. For a
detailed description of it, @xref{ATTRIBUTE}.
For information about particular attributes, @xref{Attribute list}.

@comment *L2****************************************************************
@node Requests
@section Radius requests
@cindex Request

The term @dfn{request} means both the authentication/accounting request
from @NAS{} to a Radius server and the response that the server sends back
to the @NAS{}.

Each request contains the following fields

@table @samp

@item Code
The code field identifies the type of the request. 

@item Identifier
The number in the range 0-255 used to match the request with the reply.

@item Length
The length of the request packet.

@item Authenticator
The 16-byte hash value used to authenticate the packet.

@item Attributes

The list of attribute/value pairs carrying actual information about the
request. 

@end table

@menu
* Authentication requests::
* Accounting requests::
@end menu

@comment **L3***************************************************************
@node Authentication requests
@subsection Authentication requests
@cindex Authentication requests
@cindex requests, authentication

A @NAS{} sends authentication requests (packets with code Access-Request)
to a @RADIUS{} server when a user is trying to connect to that @NAS{}. Such
requests convey information used to determine whether a user
is allowed access to the @NAS{}, and any special services requested for
that user.

An Access-Request must contain a @attr{User-Name} attribute
@ref{User-Name}. It should contain either a @attr{NAS-IP-Address}
attribute or @attr{NAS-Identifier} attribute, or both of them.
It also must contain either a @attr{Password} attribute or @attr{CHAP-Password}
attribute. These attributes are passed encoded using a method based
on the RSA Message Digest Algorithm MD5.

The Access-Request should contain a @attr{NAS-Port} or @attr{NAS-Port-Type}
attribute or both unless the type of access being requested does
not involve a port or the @NAS{} does not distinguish among its
ports.

Upon receiving Access-Request packet for a particular user and
authenticating that user, Radius server replies to the @NAS{} that
has sent the packet with either of the following packets:

@itemize @bullet
@item Access-Accept
@item Access-Reject
@item Access-Challenge
@end itemize

Radius replies with Access-Accept packet when it has successfully
authenticated the user. Such reply packet provides specific
configuration information necessary to begin delivery of service to
the user.

Radius replies with Access-Reject packet when it was unable to
authenticate the user. Such packet may contain a descriptive
text encapsulated in one or more @attr{Reply-Message} attributes.
The @NAS{} may display this text along with its response to the
user.

Radius replies with Access-Challenge packet when it desires to
obtain more information from the user in order to determine its
authenticity or to determine the kind of service to be provided
to the user.

An Access-Challenge packet may include one or more @attr{Reply-Message}
attributes, and may also include a single @attr{State} attribute, or
none. No other Attributes are permitted in an Access-Challenge.

On receipt of an Access-Challenge, the Identifier field is matched
with a pending Access-Request.  Additionally, the Response Authenticator
field must contain the correct response for the  pending Access-Request.
Radius discards invalid packets and issues appropriate log message.

If the @NAS{} does not support challenge/response, it treats an
Access-Challenge as though it had received an Access-Reject instead.
Otherwise, upon receipt of a valid Access-Challenge the @NAS{} prompts the
user for a response, possibly displaying the text message provided in
@attr{Reply-Message} attributes of the request. It then sends its
original Access-Request with a new request @sc{id} and Request Authenticator,
with the @attr{Password} attribute replaced by the encrypted user's
response, and including the @attr{State} attribute from the
Access-Challenge, if any. 

@comment **L3***************************************************************
@node Accounting requests
@subsection Accounting requests
@cindex Accounting requests
@cindex requests, accounting

Accounting-Request packets are sent from a @NAS{} to a Radius server
to allow for accounting of a service provided to a user.

Upon receipt of an Accounting-Request, the server attempts to record
the accounting packet @ref{Accounting}, and if it succeeds in doing
so it replies with an Accounting-Response packet. Otherwise it sends
no reply, which then causes the @NAS{} to retransmit its request within
a preconfigured interval of time. Such retransmits will continue until
either the server responds with an Accounting-Response packet or a
preconfigured number of retransmits is reached, whichever occurs first.

Any attribute valid in an Access-Request or Access-Accept packet
is also valid in an Accounting-Request packet, except the following
attributes, which are never present in an Accounting-Request packet:

@itemize @bullet
@item User-Password
@item CHAP-Password
@item Reply-Message
@item State
@end itemize

Either @attr{NAS-IP-Address} or @attr{NAS-Identifier} must be present in an
Accounting-Request.  It should contain a @attr{NAS-Port} or
@attr{NAS-Port-Type} attribute or both unless the service does not involve a
port or the @NAS{} does not distinguish among its ports.

If the Accounting-Request packet includes a Framed-IP-Address,
that attribute @emph{must} contain the actual @IP{} of the user.

There are five types of accounting packets, which differ by the value of
@attr{Acct-Status-Type} attribute. These are:

@table @dfn
@item Session Start Packet.
The session start packet is sent after the user has successfully passed
the authentication and has started to receive the requested service. It
must contain at least following attributes:

@itemize @bullet
@item Acct-Status-Type = Start
@item User-Name
@item Acct-Session-Id
@item NAS-IP-Address
@item NAS-Port-Id
@end itemize

@item Session Stop Packet.
The Session Stop Packet is sent after the user has disconnected. It
conveys the information about the duration of the session, number
of octets transferred, etc. It must contain at least the following
attributes:

@itemize @bullet
@item Acct-Status-Type = Stop
@item User-Name
@item NAS-IP-Address
@item Acct-Session-Id
@end itemize

The last three of them are used to find the corresponding
@dfn{Session Start Packet}.

@item Keepalive Packet
The keepalive packet is sent by the @NAS{} when it obtains some
new information about the user's session, e.g. it has determined
its @IP{} or has changed the connection speed, etc. The packet must
contain at least following attributes:

@itemize @bullet
@item Acct-Status-Type = Alive
@item User-Name
@item NAS-IP-Address
@item Acct-Session-Id
@end itemize

@item Accounting Off Packet
By sending this packet @NAS{} requests that radius mark all sessions
registered from this @NAS{} as finished. Receiving this packet usually
means that the @NAS{} is to be shut down, or is about to change its
configuration in a way that requires all currently opened sessions to
be shut down. The packet must contain at least the following attributes:

@itemize @bullet
@item Acct-Status-Type = Accounting-Off
@item NAS-IP-Address
@end itemize

@item Accounting On Packet
By sending this packet, the @NAS{} informs radius that it is ready
to accept the incoming connections. Usually this packet is sent
after startup, or after a major reconfiguration of the @NAS{}. It
must contain at least the following attributes:

@itemize @bullet
@item Acct-Status-Type = Accounting-Off
@item NAS-IP-Address
@end itemize
@end table

@comment *L2****************************************************************
@node Matching Rule
@section Matching Rule
@cindex Matching Rule
@cindex Label, Matching Rule
@cindex LHS, Matching Rule
@cindex RHS, Matching Rule

A record in the radius database describing a particular rule for
matching an incoming request is called a @dfn{Matching Rule}. Each
such rule defines an action to be taken when the match occurs.

The @dfn{Matching Rule} consists of three distinct parts:

@table @dfn
@item Label
This is used to identify the rule. The special usernames @code{DEFAULT}
and @code{BEGIN} are reserved. These will be described in detail below.

@item Left-Hand Side (LHS)
The list of attribute-value pairs used for matching the profile against
an incoming request.

@item Right-Hand Side (RHS)
The list of attribute-value pairs that define the action to be taken
if the request matches @LHS{}.
@end table

The following radius configuration files keep data in a @dfn{Matching Rule}
format: @file{hints}, @file{huntgroups} and @file{users}. Although
they keep data in similar format, the rules that are used to match
incoming requests against contents of these files differ from file
to file. The following section describes these rules in detail.

@comment *L2****************************************************************
@node Request processing
@section Processing requests
@cindex Processing requests

Upon receiving a request Radius applies to it a number of checks to
determine whether the request comes from an authorized source. If these
checks succeed, the request is processed and answered. Otherwise, the
request is dropped and corresponding error message is issued (@pxref{Logging}).

The following checks are performed:

@table @asis
@item Check if the username is supplied
If the packet lacks @attr{User-Name} attribute it is not processed
@item Check if the @NAS{} is allowed to speak
The source @IP{} of the machine that sent the packet is looked
up in the @file{clients} file (@pxref{clients file}). If no match is found,
the request is rejected. 
@item Compute the encryption key
Using the data from the packet and the shared key value from the @file{clients}
file, Radius computes the MD5 encryption key that will be used to decrypt
the value of the @attr{Password} attribute.
@item Process user-name hints.
@dfn{User-name hints} are special rules that modify the request
depending on user name and his credentials. These rules allow to divide
users into distinct groups, each group having its own authentication
and/or accounting methods. The user-name hints are stored in
@file{raddb/hints} (@pxref{hints file}).
@item Process huntgroup rules.
@dfn{Huntgroup rules} allow to segregate incoming requests depending
on the @NAS{} and/or port number they came from. These rules are stored in
@file{raddb/huntgroups} (@pxref{huntgroups file}).
@item Determine whether the request must be proxied to another radius
server
The requests pertaining to another realm are immediately forwarded
to the remote radius server for further processing. @xref{Proxying},
for the description of this process.
@item Process individual user profiles.
This step applies only to authentication requests.
@end table

@menu
* Proxying::      
* Hints::
* Huntgroups::
* User Profiles::
@end menu

@comment **L3***************************************************************
@node Proxying
@subsection Proxying
@cindex Proxying

@dfn{Proxying} is a mode of operation when a radius server forwards 
an incoming requests from a @NAS{} to another radius server, waits
for the latter to reply, and forwards the reply back to the requesting
@NAS{}. A common use for such operation mode is to provide @dfn{roaming}
between several Internet Service Providers (@acronym{ISP}s). Roaming
permits the @acronym{ISP}s to share their resources, allowing 
each other's users to connect to other party's equipment. Thus, users
traveling outside the area of one @acronym{ISP}'s coverage are still
able to access their services through another @acronym{ISP}.

@menu
* Proxy Service::        
* Realms::
@end menu

@comment ***L4**************************************************************
@node Proxy Service
@subsubsection Proxy Service
@cindex Proxy Service

Suppose the @acronym{ISP} @samp{Local} has a roaming arrangement with the
@acronym{ISP} @samp{Remote}. When the user of @samp{Remote} dials in
to the @NAS{} of @samp{Local}, the @NAS{} sends the authentication
request to @samp{Local} radius server. The server then determines that this
is a roaming user, stores a copy of the request in its
internal queue, and forwards the request to @samp{Remote} radius
server for processing. Thus, @samp{Local} radius acts as a client for
@samp{Remote} radius. When @samp{Remote} radius responds, the
@samp{Local} receives the response, and passes it back to the @NAS{}.
The copy of the request from the server's queue serves to determine
which @NAS{} originated the request. Before passing the request
back to the @NAS{}, radius removes from it the information,
specific for @samp{Remote} site, such as @attr{Framed-IP-Address},
@attr{Framed-Netmask}, etc. Only the attributes marked with
@samp{propagate} flag (@pxref{Attributes}) are passed back to
the @NAS{}. After removing site-specific attributes, @samp{Local} radius
passes the request through its user profiles (@pxref{User Profiles}) to
insert any local site-specific information that might be
needed. Finally, it passes the reply back to the @NAS{}.

The accounting requests are processed in the similar manner, except that
no attribute filtering takes place, as the accounting responces do
not carry any @AVP{}s.

This example illustrates the simplest @dfn{proxy chain}, consisting of
only two servers. The proxy chains may consist of several servers. In
our example, the @samp{Remote} radius server may also act as a proxy
and forward the request to still another radius server, etc.

@emph{Note}, that when the accounting request passes through a chain of
forwarding servers, the accounting records are stored on all servers in
the chain.

@comment ***L4**************************************************************
@node Realms
@subsubsection Realms
@cindex Realms

Radius server determines which server a request must be forwarded to
by request's @dfn{authentication realm}. There are three kinds of
realms:

@enumerate 1
@item A @dfn{Named Realm} is the part of a user name following the
@samp{at sign} (@samp{@@}). For example, if the user name is
@samp{jsmith@@this.net}, then @samp{this.net} is the realm.

The named realms can be cascaded, e.g. a request with user name
@samp{jsmith@@this.net@@remote.net} will first be forwarded to
the radius server of realm @samp{remote.net}, which in turn
will forward it to @samp{this.net}.
@item A @dfn{Default Realm} defines the server to which the requests
for realms, not mentioned explicitly in the configuration, 
are forwarded.
@item An @dfn{Empty Realm} defines the server to which the requests
@emph{without} explicit named realm are forwarded. If the configuration
does not define the empty realm, such requests are processed by the
server itself.
@end enumerate

GNU Radius keeps the information about the realms it serves in
configuration file @file{raddb/realms} (@pxref{realms file}).

@comment **L3***************************************************************
@node Hints
@subsection Hints
@cindex Hints

@dfn{User-name hints} are special rules that modify the incoming request
depending on user name and his credentials. Hints are stored as a list
of @dfn{Matching Rules} (@pxref{Matching Rule}). Upon receiving a request,
@command{radiusd} scans the hints entries sequentially, comparing each
rule's @dfn{Label} with the value of @attr{User-Name} attribute from
the request. If they coincide, then @command{radiusd} appends the contents
of the rule's @RHS{} to the request pair-list.

Both user names must match exactly in order for a hint to
take effect, unless the hint's checklist contains either @attr{Prefix} or
@attr{Suffix} attribute. The special name @samp{DEFAULT} or
@samp{DEFAULT%d} (where %d denotes any decimal number), used as hint's
@dfn{Label} match any username.

The two special attributes, @attr{Prefix} and @attr{Suffix}, may be used
in @LHS{} to restrict the match to a specified part of a user-name. Both
are string attributes. The @attr{Prefix} instructs radius to accept the
hint only if the username begins with the given prefix. Similarly,
@attr{Suffix} instructs radius to accept the hint only if the username
ends with the given suffix. A hint may contain both @attr{Prefix} and
@attr{Suffix} attributes.

In addition to these two attributes, a hint's @LHS{}  may
contain @attr{User-ID} and @attr{Group} attributes. 

The following attributes, when used in a hint's @RHS{} have
special meaning. They are not appended to the request pair-list.
Instead, they are removed after completing their function:
@table @attr
@item Fall-Through
If this attribute is present, and is set to @code{Yes}, @command{radiusd}
continues scanning the hints, after processing current entry. This
allows for applying several hints to a single packet.
@item Rewrite-Function
If this attribute is present, the specified rewrite function is invoked.
@item Replace-User-Name
The value of this attribute is expanded (@pxref{Macro substitution}),
and replaces the value of @attr{User-Name} attribute from the request.
@end table

The hints rules are defined in @file{raddb/hints} file
(@pxref{hints file}).

@comment **L3***************************************************************
@node Huntgroups
@subsection Huntgroups
@cindex Huntgroups

Huntgroups are special rules, that allow to alter processing of incoming
requests, depending on @NAS{} @IP{} and port number they come
from. The rules are stored as a list of @dfn{Matching Rules}
(@pxref{Matching Rule}). Upon receiving a request, @command{radiusd}
scans this list sequentially until it finds an entry, such that
the conditions set forth in its @LHS{} are matched by the
request. If such an entry is found, @command{radiusd} verifies that
the request meet the conditions described by @RHS{}. If it
does not, the request is rejected. In short, a huntgroup requires
that any request matching its @LHS{} must match also its
@RHS{}. The @dfn{Label} part of the rule is not used in
comparisons, instead it is used to label huntgroups. All entries
with the same label form a single huntgroup. The special attribute
@attr{Huntgroup-Name} can be used to request a match against a
particular huntgroup (@pxref{Huntgroup-Name}). 

The huntgroups rules are defined in @file{raddb/huntgroups} file
(@pxref{huntgroups file}).

@comment **L3***************************************************************
@node User Profiles
@subsection User Profiles
@cindex User Profiles
@cindex Authentication

@dfn{User Profiles} are the per-user matching rules
(@pxref{Matching Rule}). Any incoming authentication request is compared
with the @dfn{User Profiles} after it has passed both @dfn{Hints} and
@dfn{Huntgroups}. @command{Radiusd} selects from the @dfn{User Profiles}
those rules, whose @dfn{Label} matches the value of @attr{User-Name}
attribute from the incoming request.

The selected profiles form the list of authentication rules for
the request. In order for a profile to be selected, its label must
either coincide literally with the @attr{User-Name} value, or
it must be one of special labels @code{DEFAULT} and @code{BEGIN}.
The rules in the authentication list are ordered as follows: first
go all the profiles with @code{BEGIN} label, they are followed
by the profiles, whose labels match the @attr{User-Name} literally,
and, finally, these are followed by rules labeled with @code{DEFAULT}.
@footnote{For compatibility with other implementations of radius, GNU
Radius treats profile labels in the form @code{DEFAULT%d}, where @code{%d}
represents a decimal number, in the same way it treats @code{DEFAULT}
labels. The same applies to @code{BEGIN} labels.} Within each of the
three sub-lists the rules preserve the order in which they appear in
@file{raddb/users} file. Once the list is constructed, it is scanned
sequentially until the rule is found, whose @LHS{} matches the incoming
request. If no such rule is found, then the authentication
fails. Otherwise, the contents of its @RHS{} is appended to @dfn{Reply
List} being constructed. If the @RHS{} of the matched rule contains attribute
@attr{Fall-Through} with the value @code{Yes}, the matching continues.
When the list is exhausted, the authentication result is sent back
to the @NAS{} along with the @AVP{}s collected in the @dfn{Reply
List}.

The user profiles are defined in @file{raddb/users} file
(@pxref{users file}).



